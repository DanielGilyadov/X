// src/pages/ExercisesMenu.jsx - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import React, { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import './Pages.css';
import './ExercisesMenu.css'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π CSS —Ñ–∞–π–ª
import { getTablesTasks, getEtalonsUsers } from '../services/api';
import Spinner from '../components/common/Spinner';

const ExercisesMenu = () => {
  const { categoryId } = useParams();
  const navigate = useNavigate();
  const [exercises, setExercises] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryTitle = () => {
    switch(categoryId) {
      case 'rests':
        return 'REST –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏';
      case "messageBrockers":
        return 'SQL –∑–∞–ø—Ä–æ—Å—ã';
      case "demands":
        return '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π';
      default:
        return '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è';
    }
  };

  // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyText = (level) => {
    const difficultyMap = {
      1: '–õ–µ–≥–∫–∏–π',
      2: '–°—Ä–µ–¥–Ω–∏–π',
      3: '–°–ª–æ–∂–Ω—ã–π'
    };
    return difficultyMap[level] || '–°—Ä–µ–¥–Ω–∏–π';
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫—Ä—É–∂–æ—á–∫–∞–º–∏
  const DifficultyIndicator = ({ level }) => {
    return (
      <div className={`difficulty-indicator difficulty-${level}`}>
        <div className="difficulty-dot dot-1"></div>
        <div className="difficulty-dot dot-2"></div>
        <div className="difficulty-dot dot-3"></div>
        <span className="difficulty-text">{getDifficultyText(level)}</span>
      </div>
    );
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchExercises = async () => {
      try {
        setLoading(true);
        // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const response = await getTablesTasks(categoryId);
        console.log(response);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π API
        const formattedExercises = Array.isArray(response) ? response.map(item => ({
          id: item.id,
          title: item.taskName,
          description: item.taskDescription,
          difficulty: item.taskDifficulty || 2,
          type: 'rest-api' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        })) : [];
        
        setExercises(formattedExercises);
        setError(null);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        setExercises([]);
      } finally {
        setLoading(false);
      }
    };
    
    fetchExercises();
  }, [categoryId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
  const handleStartExercise = (exercise) => {
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (exercise.type === 'rest-api') {
      // –î–ª—è REST API –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ RestApiSimulator —Å –Ω–æ–≤—ã–º –ø—É—Ç–µ–º
      navigate(`/exercises/${categoryId}/apisimulator/${exercise.id}`, { 
        state: { 
          exerciseId: exercise.id,
          exerciseTitle: exercise.title
        } 
      });
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–æ—É—Ç–∏–Ω–≥
      navigate(`/exercises/${categoryId}/${exercise.id}`);
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="page page-exercises-menu" style={{ display: 'flex', justifyContent: 'center', paddingTop: '50px' }}>
        <Spinner size="large" text="–ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π..." />
      </div>
    );
  }

  return (
    <div className="page page-exercises-menu">
      <div className="breadcrumbs">
        <Link to="/exercises">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</Link>
        <span>{getCategoryTitle()}</span>
      </div>
      
      <div className="exercises-menu-header">
        <h1 className="exercises-menu-title">{getCategoryTitle()}</h1>
        <p className="exercises-menu-description">
          –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {getCategoryTitle().toLowerCase()}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.
        </p>
      </div>
      
      {error && <div className="error-message">{error}</div>}
      
      <div className="exercises-container grid-layout">
        {exercises.length > 0 ? (
          exercises.map((exercise) => (
            <div key={exercise.id} className="exercise-item">
              <div className="exercise-header">
                <h3>{exercise.title}</h3>
                <DifficultyIndicator level={exercise.difficulty} />
              </div>
              <p>{exercise.description || '–í —ç—Ç–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.'}</p>
              <button 
                className="start-exercise-button"
                onClick={() => handleStartExercise(exercise)}
              >
                –ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
              </button>
            </div>
          ))
        ) : (
          <div className="no-exercises">
            <div className="no-exercises-icon">üìã</div>
            <div className="no-exercises-message">
              –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
            </div>
            <button className="primary-button" onClick={() => navigate('/exercises')}>
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExercisesMenu;